/*  PARTE 1
    {{ configuracion del entorno de programacion }}

    *** PRIMER PASO CONFIG ***
        1.- Install composer {via brew}
        2.- Install git
        3.- Install laravel 
        4.- Install XAMPP 

        ruta 
        ************************************************************************
        $ cd /Applications/XAMPP/htdocs/
        ************************************************************************
        
        crear proyecto
        ************************************************************************
        $composer create-project laravel/laravel nombre-del-proyecto
        $cd nombre-del-proyecto
        ************************************************************************
        
        Configuracion de virtual host
        /Applications/XAMPP/xamppfiles/etc/extra/httpd-vhosts.conf

        <VirtualHost *:80>
            DocumentRoot "/Applications/XAMPP/xamppfiles/htdocs/lsapp/public"
            ServerName lsapp.me
        </VirtualHost>

        <VirtualHost *:80>
            DocumentRoot "/Applications/XAMPP/xamppfiles/htdocs"
            ServerName localhost
        </VirtualHost>
        
        agregar ruta al dns local
        ************************************************************************
        $sudo nano /etc/hosts 
        ************************************************************************
        127.0.0.1   lsapp.me
        
        descomentar la linea 488
        ruta
        /Applications/XAMPP/xamppfiles/etc/httpd.conf
        # Virtual hosts
        488 Include etc/extra/httpd-vhosts.conf

    **************************

    {{ Programacion }}
    
    *** Rutas ***
        todas las rutas se definen en el archivo web.php dentro de routes 
        routes/web.php 

        Route::get('/', function () {
            return view('welcome');
        });
        
        get es el metodo HTTP y '/' el inicio del proyecto  
        el return view regresa una vista welcome
        donde el welcome se refiere al archivo welcome.blade.php que se encuentra en resources/welcome.blade.php
        en dado caso que se encuentre en un folder ejemplo resources/paginas/welcome.blade.php la sintaxis seria 

        return view('paginas.welcome');

        las rutas definidas como 
        Route::get('/user', 'UserController@index');

        accesible desde la ruta 
        http://your-app.test/user


        rutas dinamicas son definidas con parametros dentro de {corchetes}  de la siguiente manera
        Route::get('posts/{post}/comments/{comment}', function ($postId, $commentId) {
            //
        });
        las rutas no pueden contener caracteres especiales ni -{guion} pero si _{guion bajo}

        rutas dinamicas opcionales se definen con ? al final del parametro y se debe de especificar en la function

        Route::get('user/{name?}', function ($name = null) {
            return $name;
        });

        Route::get('user/{name?}', function ($name = 'John') {
            return $name;
        });

        filtros con expresiones regular para los parametros 
        Route::get('user/{name}', function ($name) {
            //
        })->where('name', '[A-Za-z]+');

        Route::get('user/{id}', function ($id) {
            //
        })->where('id', '[0-9]+');

        Route::get('user/{id}/{name}', function ($id, $name) {
            //
        })->where(['id' => '[0-9]+', 'name' => '[a-z]+']);
    *************

    *** Controladores con artisan *** 
    
        ************************************************************************    
        $php artisan make:controller PagesController
        ************************************************************************
        
        La ruta donde se genera el archivo es 
        App/Http/Controllers/PostsController.php

        public function index(){
            $title = 'welcome';
            return view('pages.index',compact('title)); //un valor
            return view('pages.index')->with('title',$title);// un valor 
            $data = array(
                'title' => 'Services',
                'services'=> array(
                    'SEO',
                    'Programming',
                    'Example'
                )

            );
            return view('pages.index')->with($data);// paso de un array
        }
        para hablar a este metodos se especifica en routes/web.php
        Route::get("/", "PagesController@index");
        // Motor de templates blade se Explica mas abajo
        
        Esto generea todas las funciones necesarias para un CRUD listas para usar
        ************************************************************************
        $php artisan make:controller PostsController --resource
        ************************************************************************    
        routes/web.php
        Route::resource('posts','PostsController'); //se generan todas las rutas 
        ************************************************************************
        $php artisan route:list
        ************************************************************************    
        regresa una tabla visual de todas las rutas en la applicacion

        |        | GET|HEAD  | posts                  | posts.index      | App\Http\Controllers\PostsController@index                             | web          |
        |        | POST      | posts                  | posts.store      | App\Http\Controllers\PostsController@store                             | web,auth     |
        |        | GET|HEAD  | posts/create           | posts.create     | App\Http\Controllers\PostsController@create                            | web,auth     |
        |        | PUT|PATCH | posts/{post}           | posts.update     | App\Http\Controllers\PostsController@update                            | web,auth     |
        |        | GET|HEAD  | posts/{post}           | posts.show       | App\Http\Controllers\PostsController@show                              | web          |
        |        | DELETE    | posts/{post}           | posts.destroy    | App\Http\Controllers\PostsController@destroy                           | web,auth     |
        |        | GET|HEAD  | posts/{post}/edit      | posts.edit       | App\Http\Controllers\PostsController@edit                              | web,auth   

    *********************************

    *** Blade ***
        Definiendo el layout
        Todo las vistas deben de estar en 
        /resources/view/

        todas deben de tener el nombre del archivo seguido de .blade.php
        todo lo que este detro de {{ }} doble corchete es codigo php ejecutable 
        
        view/layouts 
        app.blade.php
        
        ...
        <head>
            <link rel="stylesheet" href="{{ asset('css/app.css') }}"> // asset se usa para hacer referencia public css la carpeta y el archivo app.css laravel por defecto es  bootstrap
        </head>
        <body>
            @include('inc.navbar') // sirve para a√±adir una parte de html contenida en la carpeta inc/navbar.blade.php

            @yield('content') // se define el contenido que ira cuando se defina en las vistas hijas 
        </body>
        index.blade.php
        @extends('layouts.app)

        @section('content)    
            // valores pasados por compact o with
            <h1>{{$title}} </h1>
            @if (count($services) === 1)
                I have one record!
            @elseif (count($records) > 1)
                <ul>
                    @foreach($services as $service)
                        <li>{{service}}</li>
                    @endforeach
                </ul>
            @else
                I don't have any records!
            @endif
            //.....
        @endsection
        toda el template hasta ahora descrito es hecho manual

         ***** Actualizacion  *** 
         se puede generara un template layouts/app.blade.php 
         con vista y rutas automaticas listas para trabajar con el comando 



    *************

    *** SASS ***
        resources/SASS
        
        para correr el sass bootstrap se necesita correr el npm install en la raiz del proyecto
        npm install 
        npm run dev
        npm run watch

        si se desea profundisar en el tema ver tutoriales de SASS y todas esas dulces de la programacion en Frond-End
        
    ************

    *** Base de Datos y Migracion ***
        create database mysql 
        ************************************************************************
        $php artisan make:controller PostsController
        $php artisan make:model Post -m 
        ************************************************************************

        database/migrations date_auto_gen_create_post_table 

        public function up(){
            ..
            $table->string('title');
            $table->mediumText('body');
            ..
        }

        //.env 
        DB_DATABASE=lsapp
        DB_USERNAME=root
        DB_PASSWORD=

        // App/Http/Providers/AppServiceProvider
        incluir
        use Illuminate\Support\Facades\Schema;

        public function boot(){
            Schema::defaultStringLength(191);
        }

        // correr la migracion
        ************************************************************************
        $php artisan migrate
        ************************************************************************
        esto genera tablas que estan definidas por clases en database/migrations
    *********************************

    *** Tinker (Eloquent) ***
        interaccion con la BD con Eloquent
            $php artisan tinker
            >>> App\Post::count();
            => 0
            >>> $post = new App\Post();
            >>> post->title ='post';
            >>> $post->body = 'this is test';
            >>> $post->save();
            //todo esto es para insertar registros en la bd por medio de tinker
    *************************    
/*



/* PARTE 2
    
    *** Eloquent & Model ***
        
        ************************************************************************  
        $php artisan make:model Post
        ************************************************************************
        (ver antes la seccion Base de Datos y Migracion )
        
        Todos los modelos se encuentran en
        /app/MyModelo.php 
        Y todos heredan de Model, *** el nombre debe de ser Singular *** 
        Por convencion todos los modelos deben de llevar el nombre de la tabla por ejemplo 
        Vuelos.php
        y por defecto la tabla en la BD sera vuelos
        pero si no es asi se debe de especificar con una propiedad
        protected $table = 'mis_vuelos';
        por convencion se usa snake case (serpiete convencion) y **** en plural ***

        demas propiedades 
            protected $primaryKey = "id"; //por default si el id es otro por ejemplo 'item_id'
            public $incrementing = false; // el id no sera incrementable 
            public $keyType = 'string'; // el tipo de id no sera numerica
            
            //Timestamps
            created_at y updated_at 
            por default laravel sabe que existen estas 2 columnas si no existen se tiene que setearse 
            public $Timestamps = false;

            // para modificar los Timestamps columnas en el modelo o si tiene otro nombre en la BD se tiene que definir como Constantes
            const CREATED_AT = 'fecha_creacion';
            const UPDATED_AT = 'ultima_actualizacion';

            // Eloquent 
            $vuelos = App\Vuelos::all(); // todos los registros, esto es un problema si existen miles de registros
            foreach($vuelos as $vuelo){
                echo $vuelo->name; //donde name es el nombre de la columna de la tabla en la BD 
            }

            // Eloquent con condiciones 
            $vuelos = App\Vuelos::where('active',1) // buscara en la columna active los que tengan 1 como valor
                                ->orderBy('name','desc') // los ordenara por nombre 
                                ->take(10) // solo regresara 10 se puede usar el paginate() y en la vista usar el {{ $vuelos->links() }}
                                ->get(); // ejecuta 

            /// Para usar el Modelo en el Controlador 
            use App\MyModelo;

            Post::all(); // en el controlador 


            //Guardar datos 

            $post = new Post();
            $post->title = $request->input('title');
            $post->body = $request->input('body');
            $post->user_id = auth()->user()->id;
            $post->cover_image = $fileNameToStore;
            $post->save()
    ************************

    *** Formulario con laravelcollective ***
        
        ************************************************************************    
        $composer require laravelcollective/html
        ************************************************************************    
        
        /config 
        ‚îú‚îÄ‚îÄ app.php // Abre est√© archivo 
        /database
        agregar a 
        
        'providers' => [
            // ...
            Collective\Html\HtmlServiceProvider::class,
            // ...
        ],
        
        'aliases' => [
            // ...
            'Form' => Collective\Html\FormFacade::class,
            'Html' => Collective\Html\HtmlFacade::class,
            // ...
        ],

        ejemplos

        {!! Form::open(['url' => 'foo/bar']) !!}
            //
        {!! Form::close() !!}

        se puede ver la referencia en 
        https://github.com/LaravelCollective/docs/blob/5.6/html.md

        echo Form::open(['route' => ['route.name', $user->id]])

        echo Form::open(['action' => ['Controller@method', $user->id]])
    ****************************************

    *** Mensajes y Errores ***

        layouts/inc/messages.blade.php
        //sesion succes and error 

        @if (count($errors)>0 )
            @foreach($errors->all() as $error)

            <div class="alert alert-danger">
                {{$error}}
            </div>

            @endforeach
        @endif

        @if(session('success'))
            <div class="alert alert-success">
                {{session('success')}}
            </div>
        @endif

        @if(session('error'))
            <div class="alert alert-danger">
                {{session('error')}}
            </div>
        @endif

    **************************

    *** utilidades de Edicion de text ***
        
        ************************************************************************  
        composer require unisharp/laravel-ckeditor
        ************************************************************************
        
         config/app.php

         Unisharp\Ckeditor\ServiceProvider::class,
        ************************************************************************        
        php artisan vendor:publish --tag=ckeditor
        ************************************************************************
        
        <script src="/vendor/unisharp/laravel-ckeditor/ckeditor.js"></script>
        <script>
            CKEDITOR.replace( 'article-ckeditor' );
        </script>
    *************************************

    *** 
/*